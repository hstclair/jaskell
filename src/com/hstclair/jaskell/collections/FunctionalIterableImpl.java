package com.hstclair.jaskell.collections;

import com.hstclair.jaskell.function.Expression;
import com.hstclair.jaskell.function.Function;

import java.util.Objects;


/** Implementation of the FunctionalIterable interface to allow the functions of an iterable to be transformed
 * by the consuming entity
 *
 * @author hstclair
 * @since 7/18/15 2:29 PM
 */
public class FunctionalIterableImpl<T> implements FunctionalIterable<T> {

    /** expression to retrieve the FunctionalIteratorStrategy instance that directs the behavior of this object */
    final Expression<FunctionalIteratorStrategy<T>> strategyExpression;

    /** a function that will return an FunctionalIterator instance */
    final Expression<FunctionalIterator<T>> functionalIteratorExpression;

    /** a function that will return a FunctionalSpliterator instance */
    final Expression<FunctionalSpliterator<T>> functionalSpliteratorExpression;

    /**
     * Constructor
     * @param strategyExpression the FunctionalIteratorStrategy implementation that will define the behavior of the
     *                           Iterator or Spliterator generated by this object
     */
    public FunctionalIterableImpl(Expression<FunctionalIteratorStrategy<T>> strategyExpression) {
        Objects.requireNonNull(strategyExpression);

        this.strategyExpression = strategyExpression;

        functionalIteratorExpression = () -> new FunctionalIteratorImpl<T>(strategyExpression.evaluate());
        functionalSpliteratorExpression = () -> new FunctionalSpliteratorImpl<T>(strategyExpression.evaluate());
    }

    @Override
    public FunctionalIterator<T> iterator() {
        return functionalIteratorExpression.evaluate();
    }

    @Override
    public FunctionalSpliterator<T> spliterator() {
        return functionalSpliteratorExpression.evaluate();
    }

    @Override
    public FunctionalIterable<T> takeUntil(Function<T, Boolean> predicate) {
        return new FunctionalIterableImpl<T>(() -> new FunctionalIteratorUntilStrategy<>(strategyExpression.evaluate(), predicate));
    }
}
